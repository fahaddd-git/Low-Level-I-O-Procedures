Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/01/21 17:20:49
5Low level I/O Procedure Program     (Proj6_awanf.asm	     Page 1 - 1


				TITLE  Low level I/O Procedure Program     (Proj6_awanf.asm)

				; Author: Fahad Awan
				; Last Modified: 5/25/2021
				; OSU email address:awanf@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:         6        Due Date: 6/6/2021
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays prompt then get's user's keyboard input into a memory location.
				;
				; Preconditions: do not use eax, ecx as arguments
				; Postconditions: EAX modified
				;
				; Receives:
				; promptOffset = prompt string offset
				; storeLocation = variable to store user input
				; lengthValue = maximum amount of characters to store
				;	
				; returns: user keyboard input stored in storeLocation
				;		   amount of bytes read in EAX
				; ---------------------------------------------------------------------------------

				mGetString MACRO promptOffset:REQ, storeLocationOffset:REQ, lengthValue:REQ
					

				.code
					PUSH	EDX
					PUSH	ECX

					MOV		EDX, promptOffset
					CALL	WriteString
					
					mov edx, storeLocationOffset	 ; point to the buffer
					mov ecx, lengthValue			 ; specify max characters
					call ReadString					 ; input the string
					
					POP		ECX
					POP		EDX
					
				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Displays string in console.
				;
				; Preconditions: do not use EDX as argument
				; Postconditions: string at stringOffset printed to console
				;
				; Receives: stringOffset = offset of string to display
				;	
				;	
				; returns: none
				;		   
				; ---------------------------------------------------------------------------------

				mDisplayString MACRO stringOffset:REQ

					PUSH	EDX
					
					MOV		EDX, stringOffset
					CALL	WriteString
					
					POP		EDX
				ENDM


				; amount of integers to prompt/display
 = 00000003			MAXNUMS=3

				; ASCII codes
 = 0000002B			PLUS=43
 = 0000002D			MINUS=45
 = 00000030			ZERO=48
 = 00000039			NINE=57

				; sdword limits
 = 7FFFFFFF			MAXSIZE= 2147483647
 =-80000000			MINSIZE= -2147483648

 00000000			.data

					; readval proc

 00000000 45 6E 74 65 72		enterNum		BYTE		"Enter a signed number: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000018 45 52 52 4F 52		errorMsg		BYTE		"ERROR: Number too large or invalid",0
	   3A 20 4E 75 6D
	   62 65 72 20 74
	   6F 6F 20 6C 61
	   72 67 65 20 6F
	   72 20 69 6E 76
	   61 6C 69 64 00
 0000003B  00000010 [			storedString	BYTE		16 DUP(?) 
	    00
	   ]
 0000004B 00000000			intHolder		SDWORD		?
 0000004F  00000003 [			intArray		SDWORD		MAXNUMS DUP(?)				; array of entered strings
	    00000000
	   ]
 0000005B 00000000			indexer			DWORD		0

					; writeval proc

 0000005F 7FFFFFFF			someNum			SDWORD		2147483647
				;	outputString	BYTE		16 DUP(?)
				;	otherString		BYTE		"Hope this doesn't print",0
				;	reversedString	BYTE		16 DUP(?)
					;doesThisWork	BYTE		"Testing",0,"Worked!"

					; math proc
					
 00000063 54 68 65 20 73		sumInfo			BYTE		"The sum of the numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 0000007F 54 68 65 20 61		averageInfo		BYTE		"The average of the numbers is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 0000009F 00000000			sum				SDWORD		?
 000000A3 00000000			average			SDWORD		?



 00000000			.code
 00000000			main PROC

				;	; gets and converts MAXNUMS strings to an array of integers
				;	PUSH	OFFSET intArray
				;	
				;	MOV		ECX, MAXNUMS		; amount of strings to gather from user
				;	MOV		EDI, OFFSET intArray
				;	
				;_getNums:			; gets MAXNUMS numbers, converts to sdword, stores them in intArray
				;	
				;	CALL	ReadVal
				;	MOV		EAX, intHolder
				;	MOV		[EDI], EAX
				;	ADD		EDI, 4
				;
				;	LOOP	_getNums
				;
				;
				;
				;	; prints array for testing purposes
				;
				;	MOV		EDI, OFFSET intArray
				;	MOV		ECX, LENGTHOF intArray
				;
				;_printArray:
				;	MOV		EAX, [EDI]
				;	CALL	WriteInt
				;	MOV		AL, " "
				;	CALL	WriteChar
				;	ADD		EDI, 4
				;	LOOP	_printArray
				;	
				;	; calculate and stores sum and average
				;	PUSH	sum
				;	PUSH	average
				;	PUSH	OFFSET	averageInfo
				;	PUSH	OFFSET	sumInfo
				;	PUSH	OFFSET	intArray
				;	CALL	Math


 00000000  B8 00000045			MOV		EAX, 69
 00000005  50				PUSH	EAX
 00000006  E8 00000131			CALL	WriteVal
 0000000B  E8 00000000 E		CALL	CrLf
 00000010  B8 0000005F			MOV		EAX, 95
 00000015  50				PUSH	EAX
 00000016  E8 00000121			CALL	WriteVal
					


					Invoke ExitProcess,0	; exit to operating system
 0000001B  6A 00	   *	    push   +000000000h
 0000001D  E8 00000000 E   *	    call   ExitProcess
 00000022			main ENDP



				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Converts a string of digits into a signed integerTranslator. 
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: 
				; [ebp+16] = type of array element
				; [ebp+12] = length of array
				; [ebp+8] = address of array
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integerTranslator
				; ---------------------------------------------------------------------------------
 00000022			ReadVal PROC

					
					LOCAL		negBool:BYTE, lengthCounter:DWORD, intAccumulator:SDWORD, inputLength:DWORD

 00000022  55		   *	    push   ebp
 00000023  8B EC	   *	    mov    ebp, esp
 00000025  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 00000028  55				PUSH	EBP
 00000029  8B EC			MOV		EBP, ESP
					
 0000002B  51				PUSH	ECX
				;	PUSH	EDI

					;prompts and fills userStrings array with input

 0000002C			_rePrompt:
					mGetString	OFFSET enterNum, OFFSET storedString, LENGTHOF storedString   ;need to get these from stack
 0000002C		     1	.code
 0000002C  52		     1		PUSH	EDX
 0000002D  51		     1		PUSH	ECX
 0000002E  BA 00000000 R     1		MOV		EDX, OFFSET enterNum
 00000033  E8 00000000 E     1		CALL	WriteString
 00000038  BA 0000003B R     1		mov edx, OFFSET storedString	 ; point to the buffer
 0000003D  B9 00000010	     1		mov ecx, LENGTHOF storedString			 ; specify max characters
 00000042  E8 00000000 E     1		call ReadString					 ; input the string
 00000047  59		     1		POP		ECX
 00000048  5A		     1		POP		EDX

 00000049  89 45 F0			MOV			inputLength, EAX	; length of user input (includes sign if present)

 0000004C  83 F8 00			CMP			EAX,0		; user didn't enter anything
 0000004F  74 7E			JE			_invalidItem


 00000051  C7 45 F4			MOV			intAccumulator, 0 
	   00000000
 00000058  BE 0000003B R		MOV			ESI, OFFSET storedString
 0000005D  B9 00000010			MOV			ECX, LENGTHOF storedString    
 00000062  33 C0			XOR			EAX, EAX	; clear accumulator for conversion
 00000064  C7 45 F8			MOV			lengthCounter, 0
	   00000000
 0000006B  FC				CLD

 0000006C			_toIntLoop:
 0000006C  AC				LODSB						; load string digit from inString into AL

					; this all gets skipped after first digit checked for sign

 0000006D  FF 45 F8			INC			lengthCounter	; lengthCounter at first digit, check sign to be + or - or none
 00000070  83 7D F8 01			CMP			lengthCounter, 1
 00000074  75 12			JNE			_continueCalcs	; past the first digit, so don't check for sign
 00000076  83 F8 2D			CMP			EAX, MINUS		; compare ascii of first digit with ascii of -
 00000079  75 06			JNE			_checkPlus		; if no - sign present check for + sign
 0000007B  C6 45 FF 01			MOV			negBool, 1		; - sign present raise the negBool flag
 0000007F  E2 EB			LOOP		_toIntLoop		; move to next digit, a negative sign was found
					
 00000081			_checkPlus:	
					
 00000081  83 F8 2B			CMP			EAX, PLUS		; compare ascii of first digit with ascii of +
 00000084  75 02			JNE			_continueCalcs	; if no + sign present
 00000086  E2 E4			LOOP		_toIntLoop		; move to next digit, nothing to calculate



 00000088			_continueCalcs:

					; checks to see if the digit string is an actual numerical digit. 
 00000088  83 F8 00			CMP			EAX, 0			; end of the string (null terminator)
 0000008B  74 26			JE			_endCalculations

 0000008D  83 F8 30			CMP			EAX, ZERO
 00000090  7C 3D			JL			_invalidItem	;invalid entry ascii was less than ZERO
 00000092  83 F8 39			CMP			EAX, NINE
 00000095  7F 38			JG			_invalidItem	;invalid entry ascii was greater than NINE
					

 00000097  8B D8			MOV			EBX, EAX		; store a copy in EBX
 00000099  83 E8 30			SUB			EAX, 48			; determines numerical representation of single valid digit
 0000009C  8B D8			MOV			EBX, EAX		; 
 0000009E  8B 45 F4			MOV			EAX, intAccumulator	; gets the previous calculations
 000000A1  BA 0000000A			MOV			EDX, 10			; prepare for multiplication
 000000A6  F7 EA			IMUL		EDX				; 10(previous calculations)
					
 000000A8  70 25			JO			_invalidItem		; checks for overflow flag

 000000AA  03 C3			ADD			EAX, EBX		; +(49-digit)
 000000AC  89 45 F4			MOV			intAccumulator, EAX	; store accumulation
 000000AF  33 C0			XOR			EAX, EAX		; reset eax

 000000B1  E2 B9			LOOP	_toIntLoop

 000000B3			_endCalculations:

 000000B3  80 7D FF 01			CMP			negBool, 1
 000000B7  75 07			JNE			_writeToConsole
 000000B9  F7 5D F4			NEG			intAccumulator		; negBool was raised, negate the number
 000000BC  C6 45 FF 00			MOV			negBool, 0			; reset negBool

 000000C0			_writeToConsole:

 000000C0  8B 45 F4			MOV		EAX, intAccumulator
 000000C3  E8 00000000 E		CALL	WriteInt
 000000C8  E8 00000000 E		CALL	CrLf
 000000CD  EB 14			JMP		_return

					; invalid entries 

 000000CF			_invalidItem:
 000000CF  BA 00000018 R		MOV		EDX, OFFSET errorMsg
 000000D4  E8 00000000 E		CALL	WriteString
 000000D9  E8 00000000 E		CALL	CrLf
 000000DE  E9 FFFFFF49			JMP		_rePrompt		; prompt user again for valid input

 000000E3			_return:					; TODO: save the SDWORD into an array



						; stores the valid input in the intArray array as SDWORDS

 000000E3  A3 0000004B R		MOV		intHolder,	EAX				; TODO: needs fixing, uses globals

				;	MOV		EDI, OFFSET intArray
				;	ADD		EDI, indexer
				;	MOV		ESI, intHolder
				;	MOV		[EDI], ESI
					
				;	ADD		indexer, 4

				;	MOV		EAX, inputLength
				;	MOV		EBX, intHolder
				;	PUSH	EAX
				;	PUSH	EBX
				;	CALL	WriteVal	








 000000E8  59				POP	ECX
 000000E9  5D				POP	EBP


 000000EA			_theEnd:	
 000000EA  C9		   *	    leave  
 000000EB  C2 0004			RET 4
 000000EE			ReadVal ENDP



				; calculates sum and average
 000000EE			Math PROC

 000000EE  55				PUSH	EBP
 000000EF  8B EC			MOV		EBP, ESP
					;[EBP+8]=intArray offset
					;[EBP+12] = average
					;[EBP+16]=sum
					;[EBP+20]= average
					;[EBP+24=sum
 000000F1  B9 00000003			MOV		ECX, MAXNUMS	; loop maxnums times
 000000F6  8B 75 08			MOV		ESI, [EBP+8]	; intArray offset
 000000F9  33 C0			XOR		EAX, EAX		; prepare for accumulation

 000000FB			_sumLoop: ; iterates thru array adding nums
					
 000000FB  03 06			ADD		EAX, [ESI]
 000000FD  83 C6 04			ADD		ESI, 4
 00000100  E2 F9			LOOP	_sumLoop

 00000102  E8 00000000 E		CALL	CrLf		


					mDisplayString [EBP+12]  ; displays sumInfo
 00000107  52		     1		PUSH	EDX
 00000108  8B 55 0C	     1		MOV		EDX, [EBP+12]
 0000010B  E8 00000000 E     1		CALL	WriteString
 00000110  5A		     1		POP		EDX

 00000111  E8 00000000 E		CALL	WriteInt				; TODO: Convert to string
 00000116  89 45 18			MOV		[EBP+24], EAX			; store sum

					; calc/display avg

 00000119  99				CDQ						; sign extend
 0000011A  BB 00000003			MOV		EBX, MAXNUMS	
 0000011F  F7 FB			IDIV	EBX				; divide by amount of user inputs
 00000121  E8 00000000 E		CALL	CrLf

					mDisplayString [EBP+16]	;averageInfo
 00000126  52		     1		PUSH	EDX
 00000127  8B 55 10	     1		MOV		EDX, [EBP+16]
 0000012A  E8 00000000 E     1		CALL	WriteString
 0000012F  5A		     1		POP		EDX

 00000130  E8 00000000 E		CALL	WriteInt				; TODO: convert to String
 00000135  89 45 14			MOV		[EBP+20], EAX			; store average



 00000138  5D				POP		EBP
 00000139  C2 0010			RET		16

 0000013C			Math ENDP


 0000013C			WriteVal PROC
					LOCAL	testNum:SDWORD
 0000013C  55		   *	    push   ebp
 0000013D  8B EC	   *	    mov    ebp, esp
 0000013F  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000A7				.data
 000000A7  00000010 [				outputString	BYTE	16 DUP(?)
	    00
	   ]
 000000B7  00000010 [				reversedString	BYTE	16 DUP(?)
	    00
	   ]

 00000142				.code
					; LOCAL does stack frame initialization 

 00000142  8B 45 08			MOV		EAX, [EBP+8]
 00000145  89 45 FC			MOV		testNum, EAX

					
 00000148  BF 000000A7 R		MOV		EDI, OFFSET outputString;outputString

 0000014D  B0 00			MOV		AL,0 ; null terminator at beginning
					
 0000014F  AA				STOSB
 00000150  FC				CLD
					

					;MOV		EDI, OFFSET outputString
					
 00000151  B9 00000010			MOV		ECX, LENGTHOF outputString	

 00000156  83 7D FC FF			CMP		testNum, -1
 0000015A  7F 0B			JG		_positiveOrZeroNum
 0000015C  F7 5D FC			NEG		testNum
 0000015F  B8 00000001			MOV		EAX, 1 ;negFlag
 00000164  50				PUSH	EAX
 00000165  EB 06			JMP		_loopSetup
					

 00000167			_positiveOrZeroNum:
 00000167  B8 00000000			MOV		EAX, 0
 0000016C  50				PUSH	EAX


 0000016D			_loopSetup:
					
 0000016D  8B 45 FC			MOV		EAX, testNum;[EBP+12];testNum
 00000170  BB 0000000A			MOV		EBX, 10		; divisor

 00000175			_stringLoop:

				;	XOR		EDX, EDX

 00000175  99				CDQ					; prep div

 00000176  F7 FB			IDIV	EBX
 00000178  50				PUSH	EAX
 00000179  8A C2			MOV		AL, DL
 0000017B  04 30			ADD		AL, 48

 0000017D  AA				STOSB
 0000017E  58				POP		EAX
 0000017F  83 F8 00			CMP		EAX, 0
 00000182  74 02			JE		_stringComplete



 00000184  E2 EF			LOOP	_stringLoop

 00000186			_stringComplete:
					
 00000186  58				POP		EAX
 00000187  83 F8 01			CMP		EAX, 1
 0000018A  75 04			JNE		_displayString
 0000018C  B0 2D			MOV		AL, MINUS
 0000018E  AA				STOSB
 0000018F  49				DEC		ECX  ;accomodates for - sign


 00000190			_displayString:

					; need to reverse string for display here
 00000190  BF 000000B7 R		MOV		EDI, OFFSET reversedString
 00000195  BE 000000A7 R		MOV		ESI, OFFSET outputString
 0000019A  83 C6 10			ADD		ESI, LENGTHOF reversedString ; point at end of outputString
 0000019D  49				DEC		ECX
 0000019E  2B F1			SUB		ESI, ECX
 000001A0  B9 00000010			MOV		ECX, LENGTHOF reversedString

				;	DEC		ESI

 000001A5			_revLoop:
 000001A5  FD				STD
 000001A6  AC				LODSB
 000001A7  FC				CLD
 000001A8  AA				STOSB
 000001A9  E2 FA			LOOP	_revLoop

					
					
					mDisplayString	OFFSET reversedString
 000001AB  52		     1		PUSH	EDX
 000001AC  BA 000000B7 R     1		MOV		EDX, OFFSET reversedString
 000001B1  E8 00000000 E     1		CALL	WriteString
 000001B6  5A		     1		POP		EDX





					;POP		EBP
 000001B7  C9		   *	    leave  
 000001B8  C2 0008			RET		8

 000001BB			WriteVal ENDP




				END main
Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/01/21 17:20:49
5Low level I/O Procedure Program     (Proj6_awanf.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000C7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001BB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math . . . . . . . . . . . . . .	P Near	 000000EE _TEXT	Length= 0000004E Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000000FB _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000022 _TEXT	Length= 000000CC Public STDCALL
  negBool  . . . . . . . . . . .	Byte	 bp - 00000001
  lengthCounter  . . . . . . . .	DWord	 bp - 00000008
  intAccumulator . . . . . . . .	DWord	 bp - 0000000C
  inputLength  . . . . . . . . .	DWord	 bp - 00000010
  _rePrompt  . . . . . . . . . .	L Near	 0000002C _TEXT	
  _toIntLoop . . . . . . . . . .	L Near	 0000006C _TEXT	
  _checkPlus . . . . . . . . . .	L Near	 00000081 _TEXT	
  _continueCalcs . . . . . . . .	L Near	 00000088 _TEXT	
  _endCalculations . . . . . . .	L Near	 000000B3 _TEXT	
  _writeToConsole  . . . . . . .	L Near	 000000C0 _TEXT	
  _invalidItem . . . . . . . . .	L Near	 000000CF _TEXT	
  _return  . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  _theEnd  . . . . . . . . . . .	L Near	 000000EA _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000013C _TEXT	Length= 0000007F Public STDCALL
  testNum  . . . . . . . . . . .	DWord	 bp - 00000004
  _positiveOrZeroNum . . . . . .	L Near	 00000167 _TEXT	
  _loopSetup . . . . . . . . . .	L Near	 0000016D _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 00000175 _TEXT	
  _stringComplete  . . . . . . .	L Near	 00000186 _TEXT	
  _displayString . . . . . . . .	L Near	 00000190 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 000001A5 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000022 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXNUMS  . . . . . . . . . . . .	Number	 00000003h   
MAXSIZE  . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINSIZE  . . . . . . . . . . . .	Number	 -80000000h   
MINUS  . . . . . . . . . . . . .	Number	 0000002Dh   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NINE . . . . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS . . . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000030h   
averageInfo  . . . . . . . . . .	Byte	 0000007F _DATA	
average  . . . . . . . . . . . .	DWord	 000000A3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterNum . . . . . . . . . . . .	Byte	 00000000 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000018 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
indexer  . . . . . . . . . . . .	DWord	 0000005B _DATA	
intArray . . . . . . . . . . . .	DWord	 0000004F _DATA	
intHolder  . . . . . . . . . . .	DWord	 0000004B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputString . . . . . . . . . .	Byte	 000000A7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
reversedString . . . . . . . . .	Byte	 000000B7 _DATA	
someNum  . . . . . . . . . . . .	DWord	 0000005F _DATA	
storedString . . . . . . . . . .	Byte	 0000003B _DATA	
sumInfo  . . . . . . . . . . . .	Byte	 00000063 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000009F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
