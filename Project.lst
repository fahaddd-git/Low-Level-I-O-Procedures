Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/06/21 10:37:00
5Low level I/O Procedure Program     (Proj6_awanf.asm	     Page 1 - 1


				TITLE  Low level I/O Procedure Program     (Proj6_awanf.asm)

				; Author: Fahad Awan
				; Last Modified: 6/2/2021
				; OSU email address:awanf@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:         6        Due Date: 6/6/2021
				; Description: Program displays program title and programmer.
				;			   Program prompts user for 10 strings of digits up to 15 (inclusive) digits long.
				;			   Program validates that the string entry is valid and in the acceptable range of an SDWORD.
				;			   Program converts the 10 user entered strings to integers.
				;			   Program displays the user entered strings of digits.
				;			   Program calculates and displays the sum and average of the validated user input.
				;			   Program bids farewell.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays prompt then get's user's keyboard input into a memory location.
				;
				; Preconditions: promptOffset, storeLocationOffset, and userInputLengthOffset must be mem addresses
				;				 do not use EAX as argument for userInputLengthOffset
				;
				; Postconditions: string at promptOffset written to console
				;				  user prompted for input			  
				;
				; Receives:
				;			promptOffset = offset of string used to prompt user 
				;			storeLocationOffset = offset of array in which to store user input
				;			maxLength = maximum amount of characters to store
				;			userInputLengthOffset = offset of where to store amount of bytes user enters
				;	
				; returns: user keyboard input stored in storeLocation
				;		   amount of bytes read in where userInputLengthOffset points
				; ---------------------------------------------------------------------------------

				mGetString MACRO promptOffset:REQ, storeLocationOffset:REQ, maxLength:REQ, userInputLengthOffset:REQ
					
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					PUSH	EBX

					; displays string in console
					MOV		EDX, promptOffset
					CALL	WriteString
					
					; prompts user for data
					MOV		EDX, storeLocationOffset	 ; point to the buffer
					MOV		ECX, maxLength				 ; specify max characters
					CALL	ReadString
					
					; stores amount of bytes read
					MOV		[userInputLengthOffset], EAX
					
					POP		EBX
					POP		EAX
					POP		ECX
					POP		EDX
					
				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Displays given string in console.
				;
				; Preconditions: none
				;
				; Postconditions: string starting at stringOffset printed to console
				;
				; Receives: stringOffset = offset of string to display
				;		
				; Returns: none
				;
				; ---------------------------------------------------------------------------------

				mDisplayString MACRO stringOffset:REQ

					PUSH	EDX	
					MOV		EDX, stringOffset
					CALL	WriteString
					POP		EDX

				ENDM


				; amount of integers to prompt/display
 = 00000003			MAXNUMS=3

				; ASCII codes
 = 0000002B			PLUS=43
 = 0000002D			MINUS=45
 = 00000030			ZERO=48
 = 00000039			NINE=57
 = 00000096			LENGTHLIMIT=150

				; sdword limits
 = 7FFFFFFF			MAX= 2147483647
 =-80000000			MIN= -2147483648

 00000000			.data

 00000000 57 65 6C 63 6F		progTitle		BYTE		"Welcome to the Low level I/O Procedure Program by Fahad",13,10,13,10,0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   4C 6F 77 20 6C
	   65 76 65 6C 20
	   49 2F 4F 20 50
	   72 6F 63 65 64
	   75 72 65 20 50
	   72 6F 67 72 61
	   6D 20 62 79 20
	   46 61 68 61 64
	   0D 0A 0D 0A 00

 0000003C 45 6E 74 65 72		enterNum		BYTE		"Enter a signed number: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000054 45 52 52 4F 52		errorMsg		BYTE		"ERROR: Number too large, too long (15 digits max), or invalid",0
	   3A 20 4E 75 6D
	   62 65 72 20 74
	   6F 6F 20 6C 61
	   72 67 65 2C 20
	   74 6F 6F 20 6C
	   6F 6E 67 20 28
	   31 35 20 64 69
	   67 69 74 73 20
	   6D 61 78 29 2C
	   20 6F 72 20 69
	   6E 76 61 6C 69
	   64 00
 00000092 00000000			intHolder		SDWORD		?
 00000096  00000003 [			intArray		SDWORD		MAXNUMS DUP(?)				
	    00000000
	   ]
					
 000000A2 54 68 65 20 73		sumInfo			BYTE		"The sum of the numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 000000BE 54 68 65 20 61		averageInfo		BYTE		"The average of the numbers is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 000000DE 20 20 00			delimiter		BYTE		"  ",0
 000000E1 54 68 65 73 65		userNumInfo		BYTE		"These are the numbers you entered:",13,10,0
	   20 61 72 65 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 65 6E 74 65
	   72 65 64 3A 0D
	   0A 00

 00000106 54 68 61 6E 6B		farewell		BYTE		"Thanks for using this program! Bye!",13,10,0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 69
	   73 20 70 72 6F
	   67 72 61 6D 21
	   20 42 79 65 21
	   0D 0A 00
 0000012C 00000000			index			DWORD		0




 00000000			.code
 00000000			main PROC

					; display program title and programmer's name

					mDisplayString OFFSET progTitle 
 00000000  52		     1		PUSH	EDX	
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET progTitle
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					
				;--------------------------------------------------------------------------------------------	
				; Prompt user for input and store in array.
				;		Queries user for MAXNUMS amount of strings and converts them to SDWORDS. Then, stores
				;		converted strings in an array.
				;--------------------------------------------------------------------------------------------
					
 0000000C  B9 00000003			MOV		ECX, MAXNUMS			; amount of strings to gather from user
 00000011  BF 00000096 R		MOV		EDI, OFFSET intArray

					; loop MAXNUMS times calling ReadVal procedure

 00000016			_getNums:	

 00000016  68 0000012C R		PUSH	OFFSET	index
 0000001B  68 00000096 R		PUSH	OFFSET	intArray
					
 00000020  68 00000054 R		PUSH	OFFSET	errorMsg
 00000025  68 0000003C R		PUSH	OFFSET	enterNum
 0000002A  68 00000092 R		PUSH	OFFSET	intHolder
 0000002F  E8 00000067			CALL	ReadVal
					
					; stores the generated integer in an array

				;	MOV		EAX, intHolder
				;	MOV		[EDI], EAX
				;	ADD		EDI, 4
 00000034  E2 E0			LOOP	_getNums
 00000036  E8 00000000 E		CALL	CrLf


				;--------------------------------------------------------------------------------------------	
				; Display stored array as strings.
				;		Loops through SDWORD array converting each element to a string using the WriteVal
				;		procedure and then display string using mDisplayString macro.
				;--------------------------------------------------------------------------------------------

					mDisplayString	OFFSET userNumInfo
 0000003B  52		     1		PUSH	EDX	
 0000003C  BA 000000E1 R     1		MOV		EDX, OFFSET userNumInfo
 00000041  E8 00000000 E     1		CALL	WriteString
 00000046  5A		     1		POP		EDX

 00000047  BF 00000096 R		MOV		EDI, OFFSET intArray
 0000004C  B9 00000003			MOV		ECX, LENGTHOF intArray

					; loop through array, convert to string, display

 00000051			_printArray:
 00000051  8B 07			MOV		EAX, [EDI]
 00000053  50				PUSH	EAX
 00000054  E8 000001A6			CALL	WriteVal
					mDisplayString	OFFSET delimiter
 00000059  52		     1		PUSH	EDX	
 0000005A  BA 000000DE R     1		MOV		EDX, OFFSET delimiter
 0000005F  E8 00000000 E     1		CALL	WriteString
 00000064  5A		     1		POP		EDX
 00000065  83 C7 04			ADD		EDI, 4
 00000068  E2 E7			LOOP	_printArray
 0000006A  E8 00000000 E		CALL	CrLf

				;--------------------------------------------------------------------------------------------	
				; Calculate and display sum and average.
				;		Uses SDWORD array to calculate and display the sum and average of the converted
				;		to integer user entered strings.
				;--------------------------------------------------------------------------------------------

					
 0000006F  68 000000BE R		PUSH	OFFSET	averageInfo
 00000074  68 000000A2 R		PUSH	OFFSET	sumInfo
 00000079  68 00000096 R		PUSH	OFFSET	intArray
 0000007E  E8 00000126			CALL	Math

 00000083  E8 00000000 E		CALL	CrLf

					
					; displays farewell message to the user
					
					mDisplayString	OFFSET farewell
 00000088  52		     1		PUSH	EDX	
 00000089  BA 00000106 R     1		MOV		EDX, OFFSET farewell
 0000008E  E8 00000000 E     1		CALL	WriteString
 00000093  5A		     1		POP		EDX


					Invoke ExitProcess,0	; exit to operating system
 00000094  6A 00	   *	    push   +000000000h
 00000096  E8 00000000 E   *	    call   ExitProcess
 0000009B			main ENDP





				; -----------------------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Prompts user to enter a number, validates input, then converts string of digits into a SDWORD. 
				;	Invokes mGetString macro.
				;
				; Preconditions: errorMsg, enterNum are global strings
				;				 intHolder is a global SDWORD
				;				 mGetString macro exists
				;				 offset of intHolder, offset of enterNum, offset of errorMsg on system stack
				;
				; Postconditions: none
				;
				; Receives: 
				;			[EBP+8]  = offset of intHolder global SDWORD
				;			[EBP+12] = offset of enterNum global string
				;			[EBP+16] = offset of errorMsg global string
				;
				; returns: intHolder = valid user input as an SDWORD
				; ---------------------------------------------------------------------------------------------------

 0000009B			ReadVal PROC

					LOCAL		lengthCounter:DWORD, intAccumulator:SDWORD, inputLength:DWORD, negBool:BYTE, storedString[16]:BYTE

					
 0000009B  55		   *	    push   ebp
 0000009C  8B EC	   *	    mov    ebp, esp
 0000009E  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 000000A1  60				PUSHAD	; preserve registers

					; prompts user for input

 000000A2			_rePrompt:
					
 000000A2  C6 45 F3 00			MOV		negBool, 0
 000000A6  8D 4D E3			LEA		ECX, storedString
 000000A9  8D 5D F4			LEA		EBX, inputLength
					mGetString	[EBP+12], ECX, LENGTHLIMIT, EBX
 000000AC  52		     1		PUSH	EDX
 000000AD  51		     1		PUSH	ECX
 000000AE  50		     1		PUSH	EAX
 000000AF  53		     1		PUSH	EBX
 000000B0  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000B3  E8 00000000 E     1		CALL	WriteString
 000000B8  8B D1	     1		MOV		EDX, ECX	 ; point to the buffer
 000000BA  B9 00000096	     1		MOV		ECX, LENGTHLIMIT				 ; specify max characters
 000000BF  E8 00000000 E     1		CALL	ReadString
 000000C4  89 03	     1		MOV		[EBX], EAX
 000000C6  5B		     1		POP		EBX
 000000C7  58		     1		POP		EAX
 000000C8  59		     1		POP		ECX
 000000C9  5A		     1		POP		EDX


					; validates length of user inputs 0<length<16

 000000CA  83 7D F4 0F			CMP		inputLength, 15		; num too long
 000000CE  0F 8F 000000A7		JG		_invalidItem
 000000D4  83 7D F4 00			CMP		inputLength,0		; user didn't enter anything
 000000D8  0F 84 0000009D		JE		_invalidItem

					; checks if user entered only a + or - sign

 000000DE  83 7D F4 01			CMP		inputLength, 1
 000000E2  75 14			JNE		_validLength
 000000E4  8D 75 E3			LEA		ESI, storedString
 000000E7  AC				LODSB	
 000000E8  3C 2D			CMP		AL, MINUS
 000000EA  0F 84 0000008B		JE		_invalidItem
 000000F0  3C 2B			CMP		AL, PLUS
 000000F2  0F 84 00000083		JE		_invalidItem

				;--------------------------------------------------------------------------------
				; Checks user string for + or -.
				;	User input passed initial length checks. Validates and records whether a 
				;	sign (+ or -) is present in the beginning of the string.
				;--------------------------------------------------------------------------------

					; loads user string for use with string primitive and conversion loop

 000000F8			_validLength:

 000000F8  C7 45 F8			MOV		intAccumulator, 0 
	   00000000
 000000FF  8D 75 E3			LEA		ESI, storedString
 00000102  B9 00000010			MOV		ECX, LENGTHOF storedString    
 00000107  33 C0			XOR		EAX, EAX			; clear accumulator for conversion
 00000109  C7 45 FC			MOV		lengthCounter, 0
	   00000000
 00000110  FC				CLD

					; validates if a + or - sign is present in the beginning of string

 00000111			_toIntLoop:
					
 00000111  AC				LODSB						
 00000112  FF 45 FC			INC		lengthCounter	; lengthCounter at first digit, check sign to be + or - or none
 00000115  83 7D FC 01			CMP		lengthCounter, 1
 00000119  75 12			JNE		_continueCalcs	; past the first digit, so don't check for sign
					
					; compares ascii code of - with digit present at beginning of string
					
 0000011B  83 F8 2D			CMP		EAX, MINUS		
 0000011E  75 06			JNE		_checkPlus		
 00000120  C6 45 F3 01			MOV		negBool, 1		; - sign present raise the negBool flag
 00000124  E2 EB			LOOP	_toIntLoop	
					
					; compares ascii code of + with digit present at beginning of string
					
 00000126			_checkPlus:	
					
 00000126  83 F8 2B			CMP		EAX, PLUS		
 00000129  75 02			JNE		_continueCalcs	
 0000012B  E2 E4			LOOP	_toIntLoop		


				;--------------------------------------------------------------------------------
				; Main string to integer conversion loop.
				;	User input passed sign checks. Validates each digit of the remaining string to
				;	be an ASCII character 0-9. Determines numerical representation of each digit
				;	using formula  numInt = 10 * numInt + (numChar - 48). If an overflow or carry occurs
				;	the current number is checked to see if it is the special case of the minimum
				;	SDWORD else the current number is invalidated.
				;--------------------------------------------------------------------------------


 0000012D			_continueCalcs:

 0000012D  83 F8 00			CMP		EAX, 0			; end of the string (null terminator)
 00000130  74 37			JE		_endCalculations

					; validates if each character ASCII is ASCII representation of 0-9 

 00000132  83 F8 30			CMP		EAX, ZERO
 00000135  7C 44			JL		_invalidItem	
 00000137  83 F8 39			CMP		EAX, NINE
 0000013A  7F 3F			JG		_invalidItem	
					
					; determines numerical representation of each character

 0000013C  8B D8			MOV		EBX, EAX		
 0000013E  83 E8 30			SUB		EAX, 48			
 00000141  8B D8			MOV		EBX, EAX		 
 00000143  8B 45 F8			MOV		EAX, intAccumulator		; the previous calculations
 00000146  BA 0000000A			MOV		EDX, 10			
 0000014B  F7 EA			IMUL	EDX						; 10(previous calculations)
					
					; checks if carry or overflow flags have been raised in event of invalid number

 0000014D  72 2C			JC		_invalidItem	
 0000014F  03 C3			ADD		EAX, EBX		
 00000151  89 45 F8			MOV		intAccumulator, EAX		; store accumulation
 00000154  70 04			JO		_overflowDetected		


 00000156  33 C0			XOR		EAX, EAX		
 00000158  E2 B7			LOOP	_toIntLoop

					; handles with overflow events and the special case of the smallest SDWORD

 0000015A			_overflowDetected:

 0000015A  80 7D F3 01			CMP		negBool,1
 0000015E  75 1B			JNE		_invalidItem
 00000160  81 7D F8			CMP		intAccumulator, MIN
	   80000000
 00000167  75 12			JNE		_invalidItem

					; replaces the negative sign if needed

 00000169			_endCalculations:

 00000169  80 7D F3 01			CMP			negBool, 1
 0000016D  75 07			JNE			_writeToConsole
 0000016F  F7 5D F8			NEG			intAccumulator		; negBool was raised, negate the number
 00000172  C6 45 F3 00			MOV			negBool, 0			

 00000176			_writeToConsole:

 00000176  8B 45 F8			MOV		EAX, intAccumulator
 00000179  EB 18			JMP		_return

					; invalid entries. display error message, reprompt user. 

 0000017B			_invalidItem:

					mDisplayString	[EBP+16]	; displays errorMsg string
 0000017B  52		     1		PUSH	EDX	
 0000017C  8B 55 10	     1		MOV		EDX, [EBP+16]
 0000017F  E8 00000000 E     1		CALL	WriteString
 00000184  5A		     1		POP		EDX
 00000185  E8 00000000 E		CALL	CrLf
 0000018A  C6 45 F3 00			MOV		negBool, 0			; reset negBool
 0000018E  E9 FFFFFF0F			JMP		_rePrompt			; prompt user again for valid input

					; stores the validated generated SDWORD in global variable intHolder

 00000193			_return:					

 00000193  8B 7D 14			MOV		EDI, [EBP+20] ;  [EBP+8]	; OFFSET intHolder
					
 00000196  8B 5D 18			MOV		EBX, [EBP+24]		; index
 00000199  03 3B			ADD		EDI, [EBX]			; increment the index 
					
 0000019B  89 07			MOV		[EDI], EAX

				;	MOV		EDX, OFFSET intArray

				;	MOV		EBX, [EBP+20]
				;	MOV		EBX, [EBX]
					
				;	ADD		EDX, index
				;	MOV		[EDX], EAX		; calculated num
					
 0000019D  B8 00000004			MOV		EAX, 4
 000001A2  01 03			ADD		[EBX], EAX

					; restores registers and control
					
 000001A4  61				POPAD
 000001A5  C9		   *	    leave  
 000001A6  C2 0014			RET 20

 000001A9			ReadVal ENDP

				;---------------------------------------------------------------------------------
				; Name: Math
				; 
				; Calculates and displays the sum and average (floor rounding) of an array.
				;	Invokes mDisplayString. Calls WriteVal.
				;
				; Preconditions: intArray is of type SDWORD
				;				 offset of sumInfo, offset of averageInfo, and intArray on system stack
				;				 mDisplayString macro and WriteVal procedures exist.
				;				 MAXNUMS constant exists.
				;				 
				;
				; Postconditions: sumInfo string written to console
				;				  sum of intArray written to console as string
				;				  averageInfo string written to console
				;				  average of intArray written to console as string
				;
				; Receives: 				
				;			[EBP+8]  = starting address of intArray 
				;			[EBP+12] = starting address of sumInfo 
				;			[EBP+16] = starting address of averageInfo
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 000001A9			Math PROC

 000001A9  55				PUSH	EBP
 000001AA  8B EC			MOV		EBP, ESP
					
 000001AC  60				PUSHAD					; preserve registers

					; sets up summation loop and prepares for accumulation

 000001AD  B9 00000003			MOV		ECX, MAXNUMS	
 000001B2  8B 75 08			MOV		ESI, [EBP+8]	; intArray offset
 000001B5  33 C0			XOR		EAX, EAX		; clear for accumulation

					; iterates thru array adding each number in array

 000001B7			_sumLoop:
					
 000001B7  03 06			ADD		EAX, [ESI]
 000001B9  83 C6 04			ADD		ESI, 4
 000001BC  E2 F9			LOOP	_sumLoop
 000001BE  E8 00000000 E		CALL	CrLf		

					mDisplayString [EBP+12]		; displays sumInfo string
 000001C3  52		     1		PUSH	EDX	
 000001C4  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001C7  E8 00000000 E     1		CALL	WriteString
 000001CC  5A		     1		POP		EDX

					; passes the calculated sum to WriteVal procedure to convert and display as string
					
 000001CD  50				PUSH	EAX					; sum integer
 000001CE  E8 0000002C			CALL	WriteVal
 000001D3  E8 00000000 E		CALL	CrLf

					; calculates average (floor rounding)

 000001D8  99				CDQ							; sign extend
 000001D9  BB 00000003			MOV		EBX, MAXNUMS	
 000001DE  F7 FB			IDIV	EBX					; divide by amount of user inputs
 000001E0  E8 00000000 E		CALL	CrLf
					
					mDisplayString [EBP+16]		;displays averageInfo string
 000001E5  52		     1		PUSH	EDX	
 000001E6  8B 55 10	     1		MOV		EDX, [EBP+16]
 000001E9  E8 00000000 E     1		CALL	WriteString
 000001EE  5A		     1		POP		EDX

					; passes the calculated average to WriteVal procedure to convert and display as string

 000001EF  50				PUSH	EAX					; average integer
 000001F0  E8 0000000A			CALL	WriteVal				
 000001F5  E8 00000000 E		CALL	CrLf

					; restores registers and returns control

 000001FA  61				POPAD
 000001FB  5D				POP		EBP
 000001FC  C2 000C			RET		12

 000001FF			Math ENDP




				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				; 
				; Converts and displays an SDWORD integer to a string and displays it in the console.
				;	Invokes mDisplayString macro.
				;
				; Preconditions: value to be converted is on top of the system stack before procedure called
				;				 mDisplayString macro exists
				;				 received SDWORD has been validated by ReadVal procedure
				;
				; Postconditions: string of digits written to console
				;
				; Receives: 
				;			[EBP+8]  = value of validated SDWORD to be converted and written as a string
				;			
				; returns: none
				; ---------------------------------------------------------------------------------

 000001FF			WriteVal PROC

					LOCAL	testNum:SDWORD, negFlag:DWORD, minFlag:DWORD, outputString[16]:BYTE, reversedString[16]:BYTE
					

 000001FF  55		   *	    push   ebp
 00000200  8B EC	   *	    mov    ebp, esp
 00000202  83 C4 D4	   *	    add    esp, 0FFFFFFD4h
 00000205  60				PUSHAD

					; loads the value to be converted and sets flags for conversion

 00000206  8B 45 08			MOV		EAX, [EBP+8]		; value to be converted
 00000209  89 45 FC			MOV		testNum, EAX

 0000020C  8D 7D E4			LEA		EDI, outputString
 0000020F  B0 00			MOV		AL,0				; place null terminator at beginning of string
 00000211  AA				STOSB
 00000212  FC				CLD

				;---------------------------------------------------------------------------------
				; Sets local boolean flags.
				;	Determines and sets various local flags based on whether the number is 0, +, -, or
				;	the special case minimum SDWORD.
				;---------------------------------------------------------------------------------
					
					; determines if the number is positive or 0

 00000213  83 7D FC FF			CMP		testNum, -1
 00000217  7F 1C			JG		_positiveOrZeroNum

					; tests to see if this number is the minimum SDWORD value special case

 00000219  81 7D FC			CMP		testNum, MIN
	   80000000
 00000220  75 07			JNE		_notMinimumNum
 00000222  C7 45 F4			MOV		minFlag, 1			; raise the min flag
	   00000001
					
					; all other negative numbers. negate the number to positive and raise the negFlag.

 00000229			_notMinimumNum:

 00000229  F7 5D FC			NEG		testNum				
 0000022C  C7 45 F8			MOV		negFlag, 1			
	   00000001
 00000233  EB 07			JMP		_loopSetup
					
					; positive or 0 numbers

 00000235			_positiveOrZeroNum:
 00000235  C7 45 F8			MOV		negFlag, 0
	   00000000

				;----------------------------------------------------------------------------------
				; String conversion loop.
				;	Sets up string conversion loop. In the event the special case minimum SDWORD was 
				;	detected, decrements the now positive value by 1. Converts to string by dividing
				;	by 10 and adding 48 to the remainder until the original integer reaches 0. This determines
				;	each character's ASCII value. Stores representation in outputString in reverse.
				;---------------------------------------------------------------------------------

 0000023C			_loopSetup:
					
 0000023C  8B 45 FC			MOV		EAX, testNum
 0000023F  83 7D F4 01			CMP		minFlag,1
 00000243  75 01			JNE		_notSpecialCase
 00000245  48				DEC		EAX					; decrement the max num

 00000246			_notSpecialCase:
 00000246  BB 0000000A			MOV		EBX, 10				; divisor
 0000024B  B9 00000010			MOV		ECX, LENGTHOF outputString	

					; divides by 10, adds 48 to remainder

 00000250			_stringLoop:

 00000250  99				CDQ					; prep div
 00000251  F7 FB			IDIV	EBX
 00000253  50				PUSH	EAX
 00000254  8A C2			MOV		AL, DL
 00000256  04 30			ADD		AL, 48

					; special case min flag raised

 00000258  83 7D F4 01			CMP		minFlag, 1
 0000025C  75 05			JNE		_continueLoop
 0000025E  FF 4D F4			DEC		minFlag			; set minFlagg to 0
 00000261  FE C0			INC		AL				; change the digit from 7 to 8
					
					; stores calculated ASCII values in outputString

 00000263			_continueLoop:

 00000263  AA				STOSB
 00000264  58				POP		EAX
 00000265  83 F8 00			CMP		EAX, 0
 00000268  74 02			JE		_stringComplete
 0000026A  E2 E4			LOOP	_stringLoop

					; stores the negative sign if the negFlag was raised

 0000026C			_stringComplete:
					
 0000026C  83 7D F8 01			CMP		negFlag, 1
 00000270  75 04			JNE		_displayString
 00000272  B0 2D			MOV		AL, MINUS
 00000274  AA				STOSB
 00000275  49				DEC		ECX					; accomodates for - sign

				;---------------------------------------------------------------------------------
				; Reverses ouputString and displays reversedString.
				;	Indexes into reversedString to determine where to start storing digits. Writes
				;	the reverse of outputString to reversedString.
				;---------------------------------------------------------------------------------

					; sets up location where to begin storing string

 00000276			_displayString:

 00000276  8D 7D D4			LEA		EDI, reversedString
 00000279  8D 75 E4			LEA		ESI, outputString
 0000027C  83 C6 10			ADD		ESI, LENGTHOF reversedString	 ; points at end of outputString
 0000027F  49				DEC		ECX								 ; accounts for the possible - sign
 00000280  2B F1			SUB		ESI, ECX						 ; moves pointer backwards
 00000282  B9 00000010			MOV		ECX, LENGTHOF reversedString

					; stores outputString in reverse into reversedString

 00000287			_revLoop:
 00000287  FD				STD
 00000288  AC				LODSB
 00000289  FC				CLD
 0000028A  AA				STOSB
 0000028B  E2 FA			LOOP	_revLoop

					; displays reversedString

 0000028D  8D 45 D4			LEA		EAX, reversedString
					mDisplayString	EAX		
 00000290  52		     1		PUSH	EDX	
 00000291  8B D0	     1		MOV		EDX, EAX
 00000293  E8 00000000 E     1		CALL	WriteString
 00000298  5A		     1		POP		EDX

					; restores registers and returns control

 00000299  61				POPAD
 0000029A  C9		   *	    leave  
 0000029B  C2 0004			RET		4

 0000029E			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/06/21 10:37:00
5Low level I/O Procedure Program     (Proj6_awanf.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000130 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000029E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math . . . . . . . . . . . . . .	P Near	 000001A9 _TEXT	Length= 00000056 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000001B7 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 0000010E Public STDCALL
  lengthCounter  . . . . . . . .	DWord	 bp - 00000004
  intAccumulator . . . . . . . .	DWord	 bp - 00000008
  inputLength  . . . . . . . . .	DWord	 bp - 0000000C
  negBool  . . . . . . . . . . .	Byte	 bp - 0000000D
  storedString . . . . . . . . .	Byte	 bp - 0000001D
  _rePrompt  . . . . . . . . . .	L Near	 000000A2 _TEXT	
  _validLength . . . . . . . . .	L Near	 000000F8 _TEXT	
  _toIntLoop . . . . . . . . . .	L Near	 00000111 _TEXT	
  _checkPlus . . . . . . . . . .	L Near	 00000126 _TEXT	
  _continueCalcs . . . . . . . .	L Near	 0000012D _TEXT	
  _overflowDetected  . . . . . .	L Near	 0000015A _TEXT	
  _endCalculations . . . . . . .	L Near	 00000169 _TEXT	
  _writeToConsole  . . . . . . .	L Near	 00000176 _TEXT	
  _invalidItem . . . . . . . . .	L Near	 0000017B _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000193 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001FF _TEXT	Length= 0000009F Public STDCALL
  testNum  . . . . . . . . . . .	DWord	 bp - 00000004
  negFlag  . . . . . . . . . . .	DWord	 bp - 00000008
  minFlag  . . . . . . . . . . .	DWord	 bp - 0000000C
  outputString . . . . . . . . .	Byte	 bp - 0000001C
  reversedString . . . . . . . .	Byte	 bp - 0000002C
  _notMinimumNum . . . . . . . .	L Near	 00000229 _TEXT	
  _positiveOrZeroNum . . . . . .	L Near	 00000235 _TEXT	
  _loopSetup . . . . . . . . . .	L Near	 0000023C _TEXT	
  _notSpecialCase  . . . . . . .	L Near	 00000246 _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 00000250 _TEXT	
  _continueLoop  . . . . . . . .	L Near	 00000263 _TEXT	
  _stringComplete  . . . . . . .	L Near	 0000026C _TEXT	
  _displayString . . . . . . . .	L Near	 00000276 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000287 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009B Public STDCALL
  _getNums . . . . . . . . . . .	L Near	 00000016 _TEXT	
  _printArray  . . . . . . . . .	L Near	 00000051 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LENGTHLIMIT  . . . . . . . . . .	Number	 00000096h   
MAXNUMS  . . . . . . . . . . . .	Number	 00000003h   
MAX  . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS  . . . . . . . . . . . . .	Number	 0000002Dh   
MIN  . . . . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NINE . . . . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS . . . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000030h   
averageInfo  . . . . . . . . . .	Byte	 000000BE _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delimiter  . . . . . . . . . . .	Byte	 000000DE _DATA	
enterNum . . . . . . . . . . . .	Byte	 0000003C _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000054 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 00000106 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
index  . . . . . . . . . . . . .	DWord	 0000012C _DATA	
intArray . . . . . . . . . . . .	DWord	 00000096 _DATA	
intHolder  . . . . . . . . . . .	DWord	 00000092 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumInfo  . . . . . . . . . . . .	Byte	 000000A2 _DATA	
userNumInfo  . . . . . . . . . .	Byte	 000000E1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
