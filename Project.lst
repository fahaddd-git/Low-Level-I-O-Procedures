Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/01/21 22:12:56
5Low level I/O Procedure Program     (Proj6_awanf.asm	     Page 1 - 1


				TITLE  Low level I/O Procedure Program     (Proj6_awanf.asm)

				; Author: Fahad Awan
				; Last Modified: 5/25/2021
				; OSU email address:awanf@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:         6        Due Date: 6/6/2021
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays prompt then get's user's keyboard input into a memory location.
				;
				; Preconditions: do not use eax, ecx as arguments
				; Postconditions: EAX modified
				;
				; Receives:
				; promptOffset = prompt string offset
				; storeLocation = variable to store user input
				; lengthValue = maximum amount of characters to store
				;	
				; returns: user keyboard input stored in storeLocation
				;		   amount of bytes read in EAX
				; ---------------------------------------------------------------------------------

				mGetString MACRO promptOffset:REQ, storeLocationOffset:REQ, lengthValue:REQ
					

				.code
					PUSH	EDX
					PUSH	ECX

					MOV		EDX, promptOffset
					CALL	WriteString
					
					mov edx, storeLocationOffset	 ; point to the buffer
					mov ecx, lengthValue			 ; specify max characters
					call ReadString					 ; input the string
					
					POP		ECX
					POP		EDX
					
				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Displays string in console.
				;
				; Preconditions: do not use EDX as argument
				; Postconditions: string at stringOffset printed to console
				;
				; Receives: stringOffset = offset of string to display
				;	
				;	
				; returns: none
				;		   
				; ---------------------------------------------------------------------------------

				mDisplayString MACRO stringOffset:REQ

					PUSH	EDX
					
					MOV		EDX, stringOffset
					CALL	WriteString
					
					POP		EDX
				ENDM


				; amount of integers to prompt/display
 = 00000001			MAXNUMS=1

				; ASCII codes
 = 0000002B			PLUS=43
 = 0000002D			MINUS=45
 = 00000030			ZERO=48
 = 00000039			NINE=57

				; sdword limits
 = 7FFFFFFF			MAX= 2147483647
 =-80000000			MIN= -2147483648

 00000000			.data

					; readval proc

 00000000 45 6E 74 65 72		enterNum		BYTE		"Enter a signed number: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000018 45 52 52 4F 52		errorMsg		BYTE		"ERROR: Number too large or invalid",0
	   3A 20 4E 75 6D
	   62 65 72 20 74
	   6F 6F 20 6C 61
	   72 67 65 20 6F
	   72 20 69 6E 76
	   61 6C 69 64 00
 0000003B  00000010 [			storedString	BYTE		16 DUP(?) 
	    00
	   ]
 0000004B 00000000			intHolder		SDWORD		?
 0000004F  00000001 [			intArray		SDWORD		MAXNUMS DUP(?)				; array of entered strings
	    00000000
	   ]
				;	indexer			DWORD		0

					; writeval proc

 00000053 7FFFFFFF			someNum			SDWORD		2147483647
				;	outputString	BYTE		16 DUP(?)
				;	otherString		BYTE		"Hope this doesn't print",0
				;	reversedString	BYTE		16 DUP(?)
					;doesThisWork	BYTE		"Testing",0,"Worked!"

					; math proc
					
 00000057 54 68 65 20 73		sumInfo			BYTE		"The sum of the numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 00000073 54 68 65 20 61		averageInfo		BYTE		"The average of the numbers is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 00000093 20 20 00			delimiter		BYTE		"  ",0
 00000096 54 68 65 73 65		userNumInfo		BYTE		"These are the numbers you entered:",13,10,0
	   20 61 72 65 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 65 6E 74 65
	   72 65 64 3A 0D
	   0A 00




 00000000			.code
 00000000			main PROC

					; gets and converts MAXNUMS strings to an array of integers

				;	PUSH	OFFSET intArray
					
 00000000  B9 00000001			MOV		ECX, MAXNUMS		; amount of strings to gather from user
 00000005  BF 0000004F R		MOV		EDI, OFFSET intArray
					
 0000000A			_getNums:			; gets MAXNUMS numbers, converts to sdword, stores them in intArray
					
 0000000A  68 0000004B R		PUSH	OFFSET intHolder
 0000000F  E8 00000062			CALL	ReadVal
 00000014  A1 0000004B R		MOV		EAX, intHolder
 00000019  89 07			MOV		[EDI], EAX
 0000001B  83 C7 04			ADD		EDI, 4

 0000001E  E2 EA			LOOP	_getNums

					
					; calculate and stores sum and average
					
 00000020  68 00000073 R		PUSH	OFFSET	averageInfo
 00000025  68 00000057 R		PUSH	OFFSET	sumInfo
 0000002A  68 0000004F R		PUSH	OFFSET	intArray
 0000002F  E8 0000010C			CALL	Math

 00000034  E8 00000000 E		CALL	CrLf
 00000039  BA 00000096 R		MOV		EDX, OFFSET userNumInfo
					mDisplayString	EDX
 0000003E  52		     1		PUSH	EDX
 0000003F  8B D2	     1		MOV		EDX, EDX
 00000041  E8 00000000 E     1		CALL	WriteString
 00000046  5A		     1		POP		EDX

					; prints userArray
				;
 00000047  BF 0000004F R		MOV		EDI, OFFSET intArray
 0000004C  B9 00000001			MOV		ECX, LENGTHOF intArray

 00000051			_printArray:
 00000051  8B 07			MOV		EAX, [EDI]
 00000053  50				PUSH	EAX
 00000054  E8 00000143			CALL	WriteVal
					mDisplayString	OFFSET delimiter
 00000059  52		     1		PUSH	EDX
 0000005A  BA 00000093 R     1		MOV		EDX, OFFSET delimiter
 0000005F  E8 00000000 E     1		CALL	WriteString
 00000064  5A		     1		POP		EDX
 00000065  83 C7 04			ADD		EDI, 4
 00000068  E2 E7			LOOP	_printArray
 0000006A  E8 00000000 E		CALL	CrLf


					Invoke ExitProcess,0	; exit to operating system
 0000006F  6A 00	   *	    push   +000000000h
 00000071  E8 00000000 E   *	    call   ExitProcess
 00000076			main ENDP



				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Converts a string of digits into a signed integerTranslator. 
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: 
				; [ebp+16] = type of array element
				; [ebp+12] = length of array
				; [ebp+8] = address of array
				; arrayMsg, arrayError are global variables
				;
				; returns: eax = smallest integerTranslator
				; ---------------------------------------------------------------------------------
 00000076			ReadVal PROC

					
					LOCAL		negBool:BYTE, lengthCounter:DWORD, intAccumulator:SDWORD, inputLength:DWORD

				;	PUSH	EBP
				;	MOV		EBP, ESP  TODO: RESTORE OTHER REGS
					
 00000076  55		   *	    push   ebp
 00000077  8B EC	   *	    mov    ebp, esp
 00000079  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 0000007C  51				PUSH	ECX
 0000007D  57				PUSH	EDI

					;prompts and fills userStrings array with input

 0000007E			_rePrompt:
					mGetString	OFFSET enterNum, OFFSET storedString, LENGTHOF storedString   ;need to get these from stack
 0000007E		     1	.code
 0000007E  52		     1		PUSH	EDX
 0000007F  51		     1		PUSH	ECX
 00000080  BA 00000000 R     1		MOV		EDX, OFFSET enterNum
 00000085  E8 00000000 E     1		CALL	WriteString
 0000008A  BA 0000003B R     1		mov edx, OFFSET storedString	 ; point to the buffer
 0000008F  B9 00000010	     1		mov ecx, LENGTHOF storedString			 ; specify max characters
 00000094  E8 00000000 E     1		call ReadString					 ; input the string
 00000099  59		     1		POP		ECX
 0000009A  5A		     1		POP		EDX

 0000009B  89 45 F0			MOV			inputLength, EAX	; length of user input (includes sign if present)

 0000009E  83 F8 00			CMP			EAX,0		; user didn't enter anything
 000000A1  74 7E			JE			_invalidItem


 000000A3  C7 45 F4			MOV			intAccumulator, 0 
	   00000000
 000000AA  BE 0000003B R		MOV			ESI, OFFSET storedString
 000000AF  B9 00000010			MOV			ECX, LENGTHOF storedString    
 000000B4  33 C0			XOR			EAX, EAX	; clear accumulator for conversion
 000000B6  C7 45 F8			MOV			lengthCounter, 0
	   00000000
 000000BD  FC				CLD

 000000BE			_toIntLoop:
 000000BE  AC				LODSB						; load string digit from inString into AL

					; this all gets skipped after first digit checked for sign

 000000BF  FF 45 F8			INC			lengthCounter	; lengthCounter at first digit, check sign to be + or - or none
 000000C2  83 7D F8 01			CMP			lengthCounter, 1
 000000C6  75 12			JNE			_continueCalcs	; past the first digit, so don't check for sign
 000000C8  83 F8 2D			CMP			EAX, MINUS		; compare ascii of first digit with ascii of -
 000000CB  75 06			JNE			_checkPlus		; if no - sign present check for + sign
 000000CD  C6 45 FF 01			MOV			negBool, 1		; - sign present raise the negBool flag
 000000D1  E2 EB			LOOP		_toIntLoop		; move to next digit, a negative sign was found
					
 000000D3			_checkPlus:	
					
 000000D3  83 F8 2B			CMP			EAX, PLUS		; compare ascii of first digit with ascii of +
 000000D6  75 02			JNE			_continueCalcs	; if no + sign present
 000000D8  E2 E4			LOOP		_toIntLoop		; move to next digit, nothing to calculate



 000000DA			_continueCalcs:

					; checks to see if the digit string is an actual numerical digit. 
 000000DA  83 F8 00			CMP			EAX, 0			; end of the string (null terminator)
 000000DD  74 26			JE			_endCalculations

 000000DF  83 F8 30			CMP			EAX, ZERO
 000000E2  7C 3D			JL			_invalidItem	;invalid entry ascii was less than ZERO
 000000E4  83 F8 39			CMP			EAX, NINE
 000000E7  7F 38			JG			_invalidItem	;invalid entry ascii was greater than NINE
					

 000000E9  8B D8			MOV			EBX, EAX		; store a copy in EBX
 000000EB  83 E8 30			SUB			EAX, 48			; determines numerical representation of single valid digit
 000000EE  8B D8			MOV			EBX, EAX		; 
 000000F0  8B 45 F4			MOV			EAX, intAccumulator	; gets the previous calculations
 000000F3  BA 0000000A			MOV			EDX, 10			; prepare for multiplication
 000000F8  F7 EA			IMUL		EDX				; 10(previous calculations)
					
 000000FA  70 25			JO			_invalidItem		; checks for overflow flag

 000000FC  03 C3			ADD			EAX, EBX		; +(49-digit)
 000000FE  89 45 F4			MOV			intAccumulator, EAX	; store accumulation
 00000101  33 C0			XOR			EAX, EAX		; reset eax

 00000103  E2 B9			LOOP	_toIntLoop

 00000105			_endCalculations:

 00000105  80 7D FF 01			CMP			negBool, 1
 00000109  75 07			JNE			_writeToConsole
 0000010B  F7 5D F4			NEG			intAccumulator		; negBool was raised, negate the number
 0000010E  C6 45 FF 00			MOV			negBool, 0			; reset negBool

 00000112			_writeToConsole:

 00000112  8B 45 F4			MOV		EAX, intAccumulator
 00000115  E8 00000000 E		CALL	WriteInt
 0000011A  E8 00000000 E		CALL	CrLf
 0000011F  EB 14			JMP		_return

					; invalid entries 

 00000121			_invalidItem:
 00000121  BA 00000018 R		MOV		EDX, OFFSET errorMsg
 00000126  E8 00000000 E		CALL	WriteString
 0000012B  E8 00000000 E		CALL	CrLf
 00000130  E9 FFFFFF49			JMP		_rePrompt		; prompt user again for valid input

 00000135			_return:					; TODO: save the SDWORD into an array



					; stores the valid input in the intArray array as SDWORDS

 00000135  8B 7D 08			MOV	EDI, [EBP+8]	; OFFSET intHolder
 00000138  89 07			MOV [EDI], EAX






 0000013A  5F				POP	EDI
 0000013B  59				POP	ECX


 0000013C			_theEnd:	
 0000013C  C9		   *	    leave  
 0000013D  C2 0004			RET 4
 00000140			ReadVal ENDP



				; calculates sum and average
 00000140			Math PROC

 00000140  55				PUSH	EBP
 00000141  8B EC			MOV		EBP, ESP

 00000143  51				PUSH	ECX
 00000144  56				PUSH	ESI
 00000145  50				PUSH	EAX
 00000146  53				PUSH	EBX

					
					;[EBP+8]=intArray offset
					;[EBP+12] = sumInfo
					;[EBP+16]=averageInfo


 00000147  B9 00000001			MOV		ECX, MAXNUMS	; loop maxnums times
 0000014C  8B 75 08			MOV		ESI, [EBP+8]	; intArray offset
 0000014F  33 C0			XOR		EAX, EAX		; prepare for accumulation

 00000151			_sumLoop: ; iterates thru array adding nums
					
 00000151  03 06			ADD		EAX, [ESI]
 00000153  83 C6 04			ADD		ESI, 4
 00000156  E2 F9			LOOP	_sumLoop

 00000158  E8 00000000 E		CALL	CrLf		


					mDisplayString [EBP+12]  ; displays sumInfo
 0000015D  52		     1		PUSH	EDX
 0000015E  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000161  E8 00000000 E     1		CALL	WriteString
 00000166  5A		     1		POP		EDX

					
 00000167  50				PUSH	EAX				; the sum
 00000168  E8 0000002F			CALL	WriteVal
 0000016D  E8 00000000 E		CALL	CrLf

					; calc/display avg

 00000172  99				CDQ						; sign extend
 00000173  BB 00000001			MOV		EBX, MAXNUMS	
 00000178  F7 FB			IDIV	EBX				; divide by amount of user inputs
 0000017A  E8 00000000 E		CALL	CrLf

					mDisplayString [EBP+16]		;averageInfo strng
 0000017F  52		     1		PUSH	EDX
 00000180  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000183  E8 00000000 E     1		CALL	WriteString
 00000188  5A		     1		POP		EDX

 00000189  50				PUSH	EAX						; the average
 0000018A  E8 0000000D			CALL	WriteVal				
 0000018F  E8 00000000 E		CALL	CrLf


 00000194  5B				POP		EBX
 00000195  58				POP		EAX
 00000196  5E				POP		ESI
 00000197  59				POP		ECX

 00000198  5D				POP		EBP
 00000199  C2 000C			RET		12

 0000019C			Math ENDP


 0000019C			WriteVal PROC
					LOCAL	testNum:SDWORD, negFlag:DWORD, minFlag:DWORD
 0000019C  55		   *	    push   ebp
 0000019D  8B EC	   *	    mov    ebp, esp
 0000019F  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000BB				.data
 000000BB  00000010 [				outputString	BYTE	16 DUP(?)
	    00
	   ]
 000000CB  00000010 [				reversedString	BYTE	16 DUP(?)
	    00
	   ]

 000001A2				.code
					; LOCAL does stack frame initialization 

 000001A2  50				PUSH	EAX
 000001A3  57				PUSH	EDI
 000001A4  51				PUSH	ECX
 000001A5  53				PUSH	EBX
 000001A6  56				PUSH	ESI


 000001A7  8B 45 08			MOV		EAX, [EBP+8]
 000001AA  89 45 FC			MOV		testNum, EAX

					
 000001AD  BF 000000BB R		MOV		EDI, OFFSET outputString;outputString

 000001B2  B0 00			MOV		AL,0 ; null terminator at beginning
					
 000001B4  AA				STOSB
 000001B5  FC				CLD
					

					;MOV		EDI, OFFSET outputString
					

					; determines if the number is positive or 0

 000001B6  83 7D FC FF			CMP		testNum, -1
 000001BA  7F 1C			JG		_positiveOrZeroNum

					; tests to see if this number is the minimum SDWORD special case
 000001BC  81 7D FC			CMP		testNum, MIN
	   80000000
 000001C3  75 07			JNE		_notMinimumNum
 000001C5  C7 45 F4			MOV		minFlag, 1		; raise the min flag
	   00000001
					
					; all other negative numbers
 000001CC			_notMinimumNum:

 000001CC  F7 5D FC			NEG		testNum
 000001CF  C7 45 F8			MOV		negFlag, 1 ;negFlag
	   00000001
				;	PUSH	EAX
 000001D6  EB 07			JMP		_loopSetup
					

 000001D8			_positiveOrZeroNum:
 000001D8  C7 45 F8			MOV		negFlag, 0
	   00000000
				;	PUSH	EAX


 000001DF			_loopSetup:
					
 000001DF  8B 45 FC			MOV		EAX, testNum


 000001E2  83 7D F4 01			CMP		minFlag,1
 000001E6  75 01			JNE		_notSpecialCase
 000001E8  48				DEC		EAX			; decrement the max num

 000001E9			_notSpecialCase:
 000001E9  BB 0000000A			MOV		EBX, 10		; divisor
 000001EE  B9 00000010			MOV		ECX, LENGTHOF outputString	



 000001F3			_stringLoop:

				;	XOR		EDX, EDX

 000001F3  99				CDQ					; prep div

 000001F4  F7 FB			IDIV	EBX
 000001F6  50				PUSH	EAX
 000001F7  8A C2			MOV		AL, DL
 000001F9  04 30			ADD		AL, 48

					; special case min flag raised
 000001FB  83 7D F4 01			CMP		minFlag, 1
 000001FF  75 05			JNE		_continueLoop
 00000201  FF 4D F4			DEC		minFlag			; set minFlagg to 0
 00000204  FE C0			INC		AL				; change the digit from 7 to 8
					

 00000206			_continueLoop:
 00000206  AA				STOSB


 00000207  58				POP		EAX
 00000208  83 F8 00			CMP		EAX, 0
 0000020B  74 02			JE		_stringComplete





 0000020D  E2 E4			LOOP	_stringLoop

 0000020F			_stringComplete:
					
				;	POP		EAX
 0000020F  83 7D F8 01			CMP		negFlag, 1
 00000213  75 04			JNE		_displayString
 00000215  B0 2D			MOV		AL, MINUS
 00000217  AA				STOSB
 00000218  49				DEC		ECX  ;accomodates for - sign


 00000219			_displayString:

					; need to reverse string for display here
 00000219  BF 000000CB R		MOV		EDI, OFFSET reversedString
 0000021E  BE 000000BB R		MOV		ESI, OFFSET outputString
 00000223  83 C6 10			ADD		ESI, LENGTHOF reversedString ; point at end of outputString
 00000226  49				DEC		ECX
 00000227  2B F1			SUB		ESI, ECX
 00000229  B9 00000010			MOV		ECX, LENGTHOF reversedString

				;	DEC		ESI

 0000022E			_revLoop:
 0000022E  FD				STD
 0000022F  AC				LODSB
 00000230  FC				CLD
 00000231  AA				STOSB
 00000232  E2 FA			LOOP	_revLoop

					
					
					mDisplayString	OFFSET reversedString
 00000234  52		     1		PUSH	EDX
 00000235  BA 000000CB R     1		MOV		EDX, OFFSET reversedString
 0000023A  E8 00000000 E     1		CALL	WriteString
 0000023F  5A		     1		POP		EDX

					
 00000240  5E				POP	ESI
 00000241  5B				POP	EBX
 00000242  59				POP	ECX
 00000243  5F				POP	EDI
 00000244  58				POP	EAX


					;POP		EBP
 00000245  C9		   *	    leave  
 00000246  C2 0004			RET		4

 00000249			WriteVal ENDP




				END main
Microsoft (R) Macro Assembler Version 14.28.29914.0	    06/01/21 22:12:56
5Low level I/O Procedure Program     (Proj6_awanf.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000DB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000249 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math . . . . . . . . . . . . . .	P Near	 00000140 _TEXT	Length= 0000005C Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 00000151 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000076 _TEXT	Length= 000000CA Public STDCALL
  negBool  . . . . . . . . . . .	Byte	 bp - 00000001
  lengthCounter  . . . . . . . .	DWord	 bp - 00000008
  intAccumulator . . . . . . . .	DWord	 bp - 0000000C
  inputLength  . . . . . . . . .	DWord	 bp - 00000010
  _rePrompt  . . . . . . . . . .	L Near	 0000007E _TEXT	
  _toIntLoop . . . . . . . . . .	L Near	 000000BE _TEXT	
  _checkPlus . . . . . . . . . .	L Near	 000000D3 _TEXT	
  _continueCalcs . . . . . . . .	L Near	 000000DA _TEXT	
  _endCalculations . . . . . . .	L Near	 00000105 _TEXT	
  _writeToConsole  . . . . . . .	L Near	 00000112 _TEXT	
  _invalidItem . . . . . . . . .	L Near	 00000121 _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000135 _TEXT	
  _theEnd  . . . . . . . . . . .	L Near	 0000013C _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000019C _TEXT	Length= 000000AD Public STDCALL
  testNum  . . . . . . . . . . .	DWord	 bp - 00000004
  negFlag  . . . . . . . . . . .	DWord	 bp - 00000008
  minFlag  . . . . . . . . . . .	DWord	 bp - 0000000C
  _notMinimumNum . . . . . . . .	L Near	 000001CC _TEXT	
  _positiveOrZeroNum . . . . . .	L Near	 000001D8 _TEXT	
  _loopSetup . . . . . . . . . .	L Near	 000001DF _TEXT	
  _notSpecialCase  . . . . . . .	L Near	 000001E9 _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 000001F3 _TEXT	
  _continueLoop  . . . . . . . .	L Near	 00000206 _TEXT	
  _stringComplete  . . . . . . .	L Near	 0000020F _TEXT	
  _displayString . . . . . . . .	L Near	 00000219 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 0000022E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000076 Public STDCALL
  _getNums . . . . . . . . . . .	L Near	 0000000A _TEXT	
  _printArray  . . . . . . . . .	L Near	 00000051 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXNUMS  . . . . . . . . . . . .	Number	 00000001h   
MAX  . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS  . . . . . . . . . . . . .	Number	 0000002Dh   
MIN  . . . . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NINE . . . . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS . . . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000030h   
averageInfo  . . . . . . . . . .	Byte	 00000073 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delimiter  . . . . . . . . . . .	Byte	 00000093 _DATA	
enterNum . . . . . . . . . . . .	Byte	 00000000 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000018 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 0000004F _DATA	
intHolder  . . . . . . . . . . .	DWord	 0000004B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputString . . . . . . . . . .	Byte	 000000BB _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
reversedString . . . . . . . . .	Byte	 000000CB _DATA	
someNum  . . . . . . . . . . . .	DWord	 00000053 _DATA	
storedString . . . . . . . . . .	Byte	 0000003B _DATA	
sumInfo  . . . . . . . . . . . .	Byte	 00000057 _DATA	
userNumInfo  . . . . . . . . . .	Byte	 00000096 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
